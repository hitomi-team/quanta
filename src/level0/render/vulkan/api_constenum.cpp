#include "level0/pch.h"

#include "api.h"

const std::array< VkAttachmentLoadOp, MAX_ATTACHMENT_LOAD_OP_ENUM > g_VulkanAttachmentLoadOps {
	VK_ATTACHMENT_LOAD_OP_LOAD,
	VK_ATTACHMENT_LOAD_OP_CLEAR,
	VK_ATTACHMENT_LOAD_OP_DONT_CARE
};

const std::array< VkAttachmentStoreOp, MAX_ATTACHMENT_STORE_OP_ENUM > g_VulkanAttachmentStoreOps {
	VK_ATTACHMENT_STORE_OP_STORE,
	VK_ATTACHMENT_STORE_OP_DONT_CARE
};

const std::array< VkBlendFactor, MAX_BLEND_FACTORS > g_VulkanBlendFactors {
	VK_BLEND_FACTOR_ZERO,
	VK_BLEND_FACTOR_ONE,
	VK_BLEND_FACTOR_SRC_COLOR,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
	VK_BLEND_FACTOR_DST_COLOR,
	VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
	VK_BLEND_FACTOR_SRC_ALPHA,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
	VK_BLEND_FACTOR_DST_ALPHA,
	VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
	VK_BLEND_FACTOR_CONSTANT_COLOR,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
	VK_BLEND_FACTOR_CONSTANT_ALPHA,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
	VK_BLEND_FACTOR_SRC_ALPHA_SATURATE,
	VK_BLEND_FACTOR_SRC1_COLOR,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
	VK_BLEND_FACTOR_SRC1_ALPHA,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA
};

const std::array< VkBlendOp, MAX_BLEND_OPS > g_VulkanBlendOps {
	VK_BLEND_OP_ADD,
	VK_BLEND_OP_SUBTRACT,
	VK_BLEND_OP_REVERSE_SUBTRACT,
	VK_BLEND_OP_MIN,
	VK_BLEND_OP_MAX,
	VK_BLEND_OP_ZERO_EXT,
	VK_BLEND_OP_SRC_EXT,
	VK_BLEND_OP_DST_EXT,
	VK_BLEND_OP_SRC_OVER_EXT,
	VK_BLEND_OP_DST_OVER_EXT,
	VK_BLEND_OP_SRC_IN_EXT,
	VK_BLEND_OP_DST_IN_EXT,
	VK_BLEND_OP_SRC_OUT_EXT,
	VK_BLEND_OP_DST_OUT_EXT,
	VK_BLEND_OP_SRC_ATOP_EXT,
	VK_BLEND_OP_DST_ATOP_EXT,
	VK_BLEND_OP_XOR_EXT,
	VK_BLEND_OP_MULTIPLY_EXT,
	VK_BLEND_OP_SCREEN_EXT,
	VK_BLEND_OP_OVERLAY_EXT,
	VK_BLEND_OP_DARKEN_EXT,
	VK_BLEND_OP_LIGHTEN_EXT,
	VK_BLEND_OP_COLORDODGE_EXT,
	VK_BLEND_OP_COLORBURN_EXT,
	VK_BLEND_OP_HARDLIGHT_EXT,
	VK_BLEND_OP_SOFTLIGHT_EXT,
	VK_BLEND_OP_DIFFERENCE_EXT,
	VK_BLEND_OP_EXCLUSION_EXT,
	VK_BLEND_OP_INVERT_EXT,
	VK_BLEND_OP_INVERT_RGB_EXT,
	VK_BLEND_OP_LINEARDODGE_EXT,
	VK_BLEND_OP_LINEARBURN_EXT,
	VK_BLEND_OP_VIVIDLIGHT_EXT,
	VK_BLEND_OP_LINEARLIGHT_EXT,
	VK_BLEND_OP_PINLIGHT_EXT,
	VK_BLEND_OP_HARDMIX_EXT,
	VK_BLEND_OP_HSL_HUE_EXT,
	VK_BLEND_OP_HSL_SATURATION_EXT,
	VK_BLEND_OP_HSL_COLOR_EXT,
	VK_BLEND_OP_HSL_LUMINOSITY_EXT,
	VK_BLEND_OP_PLUS_EXT,
	VK_BLEND_OP_PLUS_CLAMPED_EXT,
	VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT,
	VK_BLEND_OP_PLUS_DARKER_EXT,
	VK_BLEND_OP_MINUS_EXT,
	VK_BLEND_OP_MINUS_CLAMPED_EXT,
	VK_BLEND_OP_CONTRAST_EXT,
	VK_BLEND_OP_INVERT_OVG_EXT,
	VK_BLEND_OP_RED_EXT,
	VK_BLEND_OP_GREEN_EXT,
	VK_BLEND_OP_BLUE_EXT
};

const std::array< VkCommandBufferLevel, MAX_COMMAND_BUFFER_LEVEL_ENUM > g_VulkanCommandBufferLevels {
	VK_COMMAND_BUFFER_LEVEL_PRIMARY,
	VK_COMMAND_BUFFER_LEVEL_SECONDARY
};

const std::array< VkComponentSwizzle, static_cast< size_t >(eRenderImageComponentSwizzle::MaxEnum) > g_VulkanComponentSwizzleTypes {
	VK_COMPONENT_SWIZZLE_IDENTITY,
	VK_COMPONENT_SWIZZLE_ZERO,
	VK_COMPONENT_SWIZZLE_ONE,
	VK_COMPONENT_SWIZZLE_R,
	VK_COMPONENT_SWIZZLE_G,
	VK_COMPONENT_SWIZZLE_B,
	VK_COMPONENT_SWIZZLE_A
};

const std::array< VkCullModeFlags, MAX_CULLMODES > g_VulkanCullModes {
	VK_CULL_MODE_NONE,
	VK_CULL_MODE_FRONT_BIT,
	VK_CULL_MODE_BACK_BIT,
	VK_CULL_MODE_FRONT_AND_BACK
};

const std::array< VkDescriptorType, MAX_DESCRIPTOR_TYPE_ENUM > g_VulkanDescriptorTypes {
	VK_DESCRIPTOR_TYPE_SAMPLER,
	VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
	VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
	VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
	VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
	VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC,
	VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT,
	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR
};

const std::array< VkImageAspectFlags, MAX_IMAGE_ASPECT_ENUM > g_VulkanImageAspectFlags {
	VK_IMAGE_ASPECT_COLOR_BIT,
	VK_IMAGE_ASPECT_DEPTH_BIT,
	VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT,
	VK_IMAGE_ASPECT_STENCIL_BIT
};

const std::array< VulkanFormatAlphaProperties, MAX_IMAGE_FORMAT_ENUM > g_VulkanImageFormats {
	VulkanFormatAlphaProperties { VK_FORMAT_UNDEFINED, false },

	VulkanFormatAlphaProperties { VK_FORMAT_R8_UINT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R8G8_UINT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R8G8B8_UINT, true }, // RGBX8888
	VulkanFormatAlphaProperties { VK_FORMAT_R8G8B8A8_UINT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R8G8B8A8_SRGB, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R8G8B8A8_UINT, true }, // RGBX8888
	VulkanFormatAlphaProperties { VK_FORMAT_R8G8B8A8_SRGB, true }, // RGBX8888

	VulkanFormatAlphaProperties { VK_FORMAT_R16_SFLOAT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R32_SFLOAT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R16G16_SFLOAT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R32G32_SFLOAT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R16G16B16_SFLOAT, true }, // RGBX32323232
	VulkanFormatAlphaProperties { VK_FORMAT_R32G32B32_SFLOAT, true }, // RGBX32323232
	VulkanFormatAlphaProperties { VK_FORMAT_R16G16B16A16_SFLOAT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R32G32B32A32_SFLOAT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_R16G16B16A16_SFLOAT, true }, // RGBX16161616
	VulkanFormatAlphaProperties { VK_FORMAT_R32G32B32A32_SFLOAT, true }, // RGBX32323232

	VulkanFormatAlphaProperties { VK_FORMAT_B8G8R8_UINT, true }, // BGRX8888
	VulkanFormatAlphaProperties { VK_FORMAT_B8G8R8A8_UINT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_B8G8R8A8_SRGB, false },
	VulkanFormatAlphaProperties { VK_FORMAT_B8G8R8A8_UINT, true }, // BGRX8888
	VulkanFormatAlphaProperties { VK_FORMAT_B8G8R8A8_SRGB, true }, // BGRX8888

	VulkanFormatAlphaProperties { VK_FORMAT_D16_UNORM, false },
	VulkanFormatAlphaProperties { VK_FORMAT_D32_SFLOAT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_S8_UINT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_D16_UNORM_S8_UINT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_D24_UNORM_S8_UINT, false },
	VulkanFormatAlphaProperties { VK_FORMAT_X8_D24_UNORM_PACK32, false },
	VulkanFormatAlphaProperties { VK_FORMAT_D32_SFLOAT_S8_UINT, false },
};

const std::array< VkImageLayout, MAX_IMAGE_LAYOUT_ENUM > g_VulkanImageLayouts {
	VK_IMAGE_LAYOUT_UNDEFINED,
	VK_IMAGE_LAYOUT_GENERAL,
	VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
	VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
	VK_IMAGE_LAYOUT_PREINITIALIZED,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
	VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
	VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT,
	VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR
};

const std::array< VkImageType, MAX_IMAGE_TYPE_ENUM > g_VulkanImageTypes {
	VK_IMAGE_TYPE_1D,
	VK_IMAGE_TYPE_2D,
	VK_IMAGE_TYPE_3D,
	VK_IMAGE_TYPE_2D
};

const std::array< VkImageViewType, MAX_IMAGE_TYPE_ENUM > g_VulkanImageViewTypes {
	VK_IMAGE_VIEW_TYPE_1D,
	VK_IMAGE_VIEW_TYPE_2D,
	VK_IMAGE_VIEW_TYPE_3D,
	VK_IMAGE_VIEW_TYPE_CUBE
};

const std::array< VkImageViewType, static_cast< size_t >(eRenderImageViewType::MaxEnum) > g_VulkanImageViewTypes2 {
	VK_IMAGE_VIEW_TYPE_1D,
	VK_IMAGE_VIEW_TYPE_2D,
	VK_IMAGE_VIEW_TYPE_3D,
	VK_IMAGE_VIEW_TYPE_CUBE,
	VK_IMAGE_VIEW_TYPE_1D_ARRAY,
	VK_IMAGE_VIEW_TYPE_2D_ARRAY,
	VK_IMAGE_VIEW_TYPE_CUBE_ARRAY
};

const std::array< VkFrontFace, MAX_FRONT_FACE_ENUM > g_VulkanFrontFaces {
	VK_FRONT_FACE_COUNTER_CLOCKWISE,
	VK_FRONT_FACE_CLOCKWISE
};

const std::array< VkLogicOp, MAX_LOGIC_OP_ENUM > g_VulkanLogicOps {
	VK_LOGIC_OP_CLEAR,
	VK_LOGIC_OP_AND,
	VK_LOGIC_OP_AND_REVERSE,
	VK_LOGIC_OP_COPY,
	VK_LOGIC_OP_AND_INVERTED,
	VK_LOGIC_OP_NO_OP,
	VK_LOGIC_OP_XOR,
	VK_LOGIC_OP_OR,
	VK_LOGIC_OP_NOR,
	VK_LOGIC_OP_EQUIVALENT,
	VK_LOGIC_OP_INVERT,
	VK_LOGIC_OP_OR_REVERSE,
	VK_LOGIC_OP_COPY_INVERTED,
	VK_LOGIC_OP_OR_INVERTED,
	VK_LOGIC_OP_NAND,
	VK_LOGIC_OP_SET
};

const std::array< VkPolygonMode, MAX_FILL_MODE_ENUM > g_VulkanPolygonModes {
	VK_POLYGON_MODE_FILL,
	VK_POLYGON_MODE_LINE,
	VK_POLYGON_MODE_POINT
};

const std::array< VkPresentModeKHR, MAX_PRESENT_MODE_ENUM > g_VulkanPresentModes {
	VK_PRESENT_MODE_IMMEDIATE_KHR,
	VK_PRESENT_MODE_FIFO_KHR,
	VK_PRESENT_MODE_FIFO_RELAXED_KHR,
	VK_PRESENT_MODE_MAILBOX_KHR
};

const std::array< VkPrimitiveTopology, MAX_PRIMITIVE_TYPE_ENUM > g_VulkanPrimitiveTypes {
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
	VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN
};

const std::array< VkSamplerAddressMode, MAX_ADDRESSMODES > g_VulkanSamplerAddressModes {
	VK_SAMPLER_ADDRESS_MODE_REPEAT,
	VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE
};

const std::array< VkCompareOp, MAX_TCF > g_VulkanSamplerCompareOps {
	VK_COMPARE_OP_NEVER,
	VK_COMPARE_OP_EQUAL,
	VK_COMPARE_OP_NOT_EQUAL,
	VK_COMPARE_OP_LESS,
	VK_COMPARE_OP_LESS_OR_EQUAL,
	VK_COMPARE_OP_GREATER,
	VK_COMPARE_OP_GREATER_OR_EQUAL,
	VK_COMPARE_OP_ALWAYS
};

const std::array< VkFilter, MAX_FILTERMODES > g_VulkanSamplerFilterModes {
	VK_FILTER_NEAREST,
	VK_FILTER_LINEAR,
	VK_FILTER_LINEAR,
	VK_FILTER_LINEAR,
	VK_FILTER_LINEAR
};

const std::array< VkSamplerMipmapMode, MAX_FILTERMODES > g_VulkanSamplerMipmapModes {
	VK_SAMPLER_MIPMAP_MODE_NEAREST,
	VK_SAMPLER_MIPMAP_MODE_LINEAR,
	VK_SAMPLER_MIPMAP_MODE_LINEAR,
	VK_SAMPLER_MIPMAP_MODE_LINEAR,
	VK_SAMPLER_MIPMAP_MODE_LINEAR
};

const std::array< VkShaderStageFlagBits, MAX_SHADER_TYPES > g_VulkanShaderTypes {
	VK_SHADER_STAGE_VERTEX_BIT,
	VK_SHADER_STAGE_FRAGMENT_BIT,
	VK_SHADER_STAGE_GEOMETRY_BIT,
	VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
	VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT
};

const std::array< VkStencilOp, MAX_STENCIL_OP_ENUM > g_VulkanStencilOps {
	VK_STENCIL_OP_KEEP,
	VK_STENCIL_OP_ZERO,
	VK_STENCIL_OP_REPLACE,
	VK_STENCIL_OP_INCREMENT_AND_CLAMP,
	VK_STENCIL_OP_DECREMENT_AND_CLAMP,
	VK_STENCIL_OP_INVERT,
	VK_STENCIL_OP_INCREMENT_AND_WRAP,
	VK_STENCIL_OP_DECREMENT_AND_WRAP
};

const std::array< VkSubpassContents, MAX_SUBPASS_CONTENTS_ENUM > g_VulkanSubpassContents {
	VK_SUBPASS_CONTENTS_INLINE,
	VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS
};

const std::array< VkVertexInputRate, MAX_VERTEX_INPUT_RATE_ENUM > g_VulkanVertexInputRates {
	VK_VERTEX_INPUT_RATE_VERTEX,
	VK_VERTEX_INPUT_RATE_INSTANCE
};
